{"filter":false,"title":"depuradorCesar.py","tooltip":"/depuradorCesar.py","undoManager":{"mark":10,"position":10,"stack":[[{"start":{"row":1,"column":0},"end":{"row":1,"column":23},"action":"remove","lines":["Your module description"],"id":1},{"start":{"row":1,"column":0},"end":{"row":1,"column":75},"action":"insert","lines":["Ejercicio 1: Trabajo con el programa de cifrado César con errores - Parte 1"]}],[{"start":{"row":3,"column":0},"end":{"row":58,"column":24},"action":"insert","lines":["# Module Lab: Caesar Cipher Program Bug #1","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + cipherKey","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":2}],[{"start":{"row":3,"column":0},"end":{"row":58,"column":24},"action":"remove","lines":["# Module Lab: Caesar Cipher Program Bug #1","#","# In a previous lab, you created a Caesar cipher program. This version of","# the program is buggy. Use a debugger to find the bug and fix it.","","# Double the given alphabet","def getDoubleAlphabet(alphabet):","    doubleAlphabet = alphabet + alphabet","    return doubleAlphabet","","# Get a message to encrypt","def getMessage():","    stringToEncrypt = input(\"Please enter a message to encrypt: \")","    return stringToEncrypt","","# Get a cipher key","def getCipherKey():","    shiftAmount = input(\"Please enter a key (whole number from 1-25): \")","    return shiftAmount","","# Encrypt message","def encryptMessage(message, cipherKey, alphabet):","    encryptedMessage = \"\"","    uppercaseMessage = \"\"","    uppercaseMessage = message.upper()","    for currentCharacter in uppercaseMessage:","        position = alphabet.find(currentCharacter)","        newPosition = position + cipherKey","        if currentCharacter in alphabet:","            encryptedMessage = encryptedMessage + alphabet[newPosition]","        else:","            encryptedMessage = encryptedMessage + currentCharacter","    return encryptedMessage","","# Decrypt message","def decryptMessage(message, cipherKey, alphabet):","    decryptKey = -1 * int(cipherKey)","    return encryptMessage(message, decryptKey, alphabet)","","# Main program logic","def runCaesarCipherProgram():","    myAlphabet=\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alphabet: {myAlphabet}')","    myAlphabet2 = getDoubleAlphabet(myAlphabet)","    print(f'Alphabet2: {myAlphabet2}')","    myMessage = getMessage()","    print(myMessage)","    myCipherKey = getCipherKey()","    print(myCipherKey)","    myEncryptedMessage = encryptMessage(myMessage, myCipherKey, myAlphabet2)","    print(f'Encrypted Message: {myEncryptedMessage}')","    myDecryptedMessage = decryptMessage(myEncryptedMessage, myCipherKey, myAlphabet2)","    print(f'Decrypted Message: {myDecryptedMessage}')","","# Main logic","runCaesarCipherProgram()"],"id":3}],[{"start":{"row":3,"column":0},"end":{"row":58,"column":30},"action":"insert","lines":["# Módulo Laboratorio: Programa de Cifrado César Error #1","#","# En un laboratorio anterior, creaste un programa de cifrado César. Esta versión del","# programa tiene errores. Usa un depurador para encontrar el error y corregirlo.","","# Duplicar el alfabeto dado","def obtenerAlfabetoDuplicado(alfabeto):","    alfabetoDuplicado = alfabeto + alfabeto","    return alfabetoDuplicado","","# Obtener un mensaje para cifrar","def obtenerMensaje():","    cadenaACifrar = input(\"Por favor, introduce un mensaje para cifrar: \")","    return cadenaACifrar","","# Obtener una clave de cifrado","def obtenerClaveCifrado():","    cantidadDesplazamiento = input(\"Por favor, introduce una clave (número entero del 1 al 25): \")","    return cantidadDesplazamiento","","# Cifrar el mensaje","def cifrarMensaje(mensaje, claveCifrado, alfabeto):","    mensajeCifrado = \"\"","    mensajeMayusculas = \"\"","    mensajeMayusculas = mensaje.upper()","    for caracterActual in mensajeMayusculas:","        posicion = alfabeto.find(caracterActual)","        nuevaPosicion = posicion + claveCifrado","        if caracterActual in alfabeto:","            mensajeCifrado = mensajeCifrado + alfabeto[nuevaPosicion]","        else:","            mensajeCifrado = mensajeCifrado + caracterActual","    return mensajeCifrado","","# Descifrar el mensaje","def descifrarMensaje(mensaje, claveCifrado, alfabeto):","    claveDescifrado = -1 * int(claveCifrado)","    return cifrarMensaje(mensaje, claveDescifrado, alfabeto)","","# Lógica principal del programa","def ejecutarProgramaCifradoCesar():","    miAlfabeto = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"","    print(f'Alfabeto: {miAlfabeto}')","    miAlfabeto2 = obtenerAlfabetoDuplicado(miAlfabeto)","    print(f'Alfabeto2: {miAlfabeto2}')","    miMensaje = obtenerMensaje()","    print(miMensaje)","    miClaveCifrado = obtenerClaveCifrado()","    print(miClaveCifrado)","    miMensajeCifrado = cifrarMensaje(miMensaje, miClaveCifrado, miAlfabeto2)","    print(f'Mensaje Cifrado: {miMensajeCifrado}')","    miMensajeDescifrado = descifrarMensaje(miMensajeCifrado, miClaveCifrado, miAlfabeto2)","    print(f'Mensaje Descifrado: {miMensajeDescifrado}')","","# Lógica principal","ejecutarProgramaCifradoCesar()"],"id":4}],[{"start":{"row":27,"column":39},"end":{"row":28,"column":0},"action":"insert","lines":["",""],"id":5},{"start":{"row":28,"column":0},"end":{"row":28,"column":4},"action":"insert","lines":["    "]}],[{"start":{"row":28,"column":4},"end":{"row":28,"column":71},"action":"insert","lines":["claveCifrado = int(claveCifrado)  # Convertir claveCifrado a entero"],"id":6}],[{"start":{"row":28,"column":40},"end":{"row":28,"column":41},"action":"insert","lines":["C"],"id":7},{"start":{"row":28,"column":41},"end":{"row":28,"column":42},"action":"insert","lines":["o"]},{"start":{"row":28,"column":42},"end":{"row":28,"column":43},"action":"insert","lines":["r"]},{"start":{"row":28,"column":43},"end":{"row":28,"column":44},"action":"insert","lines":["r"]},{"start":{"row":28,"column":44},"end":{"row":28,"column":45},"action":"insert","lines":["e"]}],[{"start":{"row":28,"column":45},"end":{"row":28,"column":46},"action":"insert","lines":["c"],"id":8},{"start":{"row":28,"column":46},"end":{"row":28,"column":47},"action":"insert","lines":["c"]},{"start":{"row":28,"column":47},"end":{"row":28,"column":48},"action":"insert","lines":["i"]},{"start":{"row":28,"column":48},"end":{"row":28,"column":49},"action":"insert","lines":["o"]},{"start":{"row":28,"column":49},"end":{"row":28,"column":50},"action":"insert","lines":["n"]}],[{"start":{"row":28,"column":50},"end":{"row":28,"column":51},"action":"insert","lines":[" "],"id":9},{"start":{"row":28,"column":51},"end":{"row":28,"column":52},"action":"insert","lines":["d"]},{"start":{"row":28,"column":52},"end":{"row":28,"column":53},"action":"insert","lines":["e"]},{"start":{"row":28,"column":53},"end":{"row":28,"column":54},"action":"insert","lines":["l"]}],[{"start":{"row":28,"column":54},"end":{"row":28,"column":55},"action":"insert","lines":[" "],"id":10},{"start":{"row":28,"column":55},"end":{"row":28,"column":56},"action":"insert","lines":["e"]},{"start":{"row":28,"column":56},"end":{"row":28,"column":57},"action":"insert","lines":["r"]},{"start":{"row":28,"column":57},"end":{"row":28,"column":58},"action":"insert","lines":["r"]},{"start":{"row":28,"column":58},"end":{"row":28,"column":59},"action":"insert","lines":["o"]},{"start":{"row":28,"column":59},"end":{"row":28,"column":60},"action":"insert","lines":["r"]},{"start":{"row":28,"column":60},"end":{"row":28,"column":61},"action":"insert","lines":[":"]}],[{"start":{"row":28,"column":61},"end":{"row":28,"column":62},"action":"insert","lines":[" "],"id":11}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":28,"column":62},"end":{"row":28,"column":62},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1722010470067,"hash":"b779f9ac65a8d1eb20b4fc802fc651c3afd76fb2"}